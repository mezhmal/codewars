@main def solution(params: String*): Unit =
  println(sumOfIntervals(List((1, 5))))
  println(sumOfIntervals(List((1, 2), (6, 10), (3, 5))))
  println(sumOfIntervals(List((1, 5), (1, 5))))
  println(sumOfIntervals(List((1, 4), (7, 10), (3, 5))))
  println(sumOfIntervals(List((1, 4), (7, 10), (3, 5), (6, 9), (1, 2))))  // Expected 8

  val smallInterval1 = List((499,500), (288,366), (80,295), (493,496), (-298,474), (-197,45), (-468,41), (354,356), (-341,460))
  println(sumOfIntervals(smallInterval1)) // Expected 946

  val smallInterval2 = List((333,384), (-12,149), (342,464), (473,474), (67,383), (209,341), (-65,-14), (249,451))
  println(sumOfIntervals(smallInterval2)) // Expected 528

  val largeInterval = List((-61633513,-54687932), (963637915,971064132), (-753080172,-743886277), (148316338,153614534), (980950814,985772158), (-790133965,-784535948), (-429783243,-423140852), (-40511588,-38895787), (-514144719,-507180359), (-280687593,-277814406), (-275473821,-266603982), (-766972046,-763274662), (835658417,841470602), (838888209,847496977), (341690378,347868079), (-22507078,-14825827), (84718140,90979260), (865439997,866842293), (-374738829,-371640503), (-959901890,-951774434), (270430031,278352548), (780935264,787038905), (-975047008,-972339701), (-173303024,-169694520), (63899841,70698934), (98056363,102003003), (814685582,821449626), (102271437,111725971), (212161283,214983587), (399599991,406733988), (-953856654,-944108517), (-666224420,-660073553), (990224736,994498574), (962383304,964926417), (509133053,517767760), (-287990354,-281114095), (-869464257,-860444822), (-309899444,-303351038), (-821814630,-815006285), (769490173,779180664), (-832863906,-828805151), (-663940709,-660062763), (-649862740,-645004943), (205343246,213686138), (807536406,811904104), (183174518,189045111), (-670275629,-664832476), (251178481,255838778), (-194411621,-187715508), (389522441,395261764), (589239845,597319643), (-777949056,-769563181), (712179014,718530446), (346808302,347908827), (-262853240,-258228892), (107354635,108755513), (-539337426,-530169886), (71297080,79818804), (974041187,976582170), (937463173,945699929), (638326223,644811872), (434912663,444261680), (123526473,128165067), (-451485787,-442853580), (-183777366,-179062636), (588824476,592416502), (-307494467,-300425074), (377614179,385392747), (-510092206,-501131953), (406010425,414218852), (-271436942,-264636010), (294628410,300662990), (744134316,752099748), (862441472,870586929), (-606509938,-597355285), (-850402203,-842864140), (886156080,888279531), (61107303,65989499), (299876330,308250929), (-535520475,-529706516), (192389157,200938957), (-952091130,-944939104), (361712975,364069817), (-303110407,-298293527), (-73026072,-66140761), (197146838,199042102), (449699257,459513177), (-737060893,-733794701), (116332325,125029917), (-430858125,-427613583), (-781828200,-774297406), (-448731734,-445662889), (-255782628,-253398648), (313760347,322221389), (176929546,179146824), (127755794,132664258), (574231517,582195444), (-462895059,-453989519), (-298265054,-291014897), (-466973915,-459624946), (-616007028,-610914522), (942270954,948046347), (-712351452,-706399199), (480405869,489216321), (-683533411,-676337898), (-105740233,-102974193), (39307973,41705094), (607815222,615960296), (468378481,475558611), (381222809,384382790), (971646158,981600930), (-832954116,-830328815), (275182511,285136395), (366016378,369455393), (177204808,178800284), (-781836495,-775750340), (-267907288,-258994329), (146000207,151329986), (387387531,389865060), (606034285,610147560), (628128316,632681030), (80297604,88213692), (-439524315,-433067225), (502735248,505098524), (470521717,478513825), (618931135,625789719), (-507160468,-504517382), (748979798,756812519), (889176774,896140825), (721794593,727783016), (-834518335,-832770884), (514413717,515961019))
  println(sumOfIntervals(largeInterval))  // Expected 665376652


def mergePair(interval1: (Int, Int), interval2: (Int, Int)): List[(Int, Int)] = 
  0 match
    case _ if interval1._1 to interval1._2 contains interval2._1 => List((interval1._1, math.max(interval1._2, interval2._2)))
    case _ if interval2._1 to interval2._2 contains interval1._1 => List((interval2._1, math.max(interval1._2, interval2._2)))
    case _ => List(interval1, interval2)

def mergeHeadWithTail(intervals: List[(Int, Int)]): ((Int, Int), List[(Int, Int)]) =
  var head = intervals.head
  var tail = intervals.tail
  for (interval <- tail) {
    val mergedPair = mergePair(head, interval)
    if (mergedPair.size == 1) {
      head = mergedPair.head
      tail = tail.drop(1)
    }
  }
  (head, tail)

def sumOfIntervals(intervals: List[(Int, Int)]): Int =
  var restIntervals = intervals.sorted
  var mergedIntervals: List[(Int, Int)] = List()
  while (restIntervals.size > 0) {
    val (head, tail) = mergeHeadWithTail(restIntervals)
    mergedIntervals = mergedIntervals :+ head
    restIntervals = tail
  }
  mergedIntervals.map((start, end) => end - start).sum
